#include "common.h"
#include "hdr10.h"

uniform float4 timers_game;

#define TIME_ABSOLUTE (timers_game.x) // [0, 86400]
#define TIME_01       (timers_game.y) // [0, 1]
#define TIME_HOURSF   (timers_game.z) // [0, 24]
#define TIME_HOURS    (timers_game.w) // {0, 1, ..., 24}

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
float4 main ( p_TL I ) : SV_Target
{
    if (HDR10_IS_ENABLED && HDR10_SUN_ON) {
        const float amplitude = HDR10_SUN_INTENSITY;
        static const float inner_radius = 0.5 * HDR10_SUN_INNER_RADIUS;
        static const float outer_radius = 0.5 * HDR10_SUN_OUTER_RADIUS;
        
        // sample the center pixel of sun sprite to determine color and alpha
        float4 center_px = s_base.Sample(smp_base, float2(0.5, 0.5));
        float3 tint = center_px * I.Color.rgb;

        float radial_dist = distance(I.Tex0.xy, float2(0.5, 0.5));
        float norm_dist = (radial_dist - inner_radius) / (outer_radius - inner_radius);
        norm_dist = saturate(norm_dist);

        float magnitude = lerp(amplitude, 0, smoothstep(0, 1, norm_dist));

        float4 hdr_sun = float4(magnitude * tint, center_px.a * I.Color.a);
        float4 normal_sun = s_base.Sample(smp_base, I.Tex0) * I.Color;

        if (HDR10_SUN_DAWN_END <= TIME_HOURSF && TIME_HOURSF <= HDR10_SUN_DUSK_BEGIN) {
            // day
            return hdr_sun;

        } else if (HDR10_SUN_DAWN_BEGIN < TIME_HOURSF && TIME_HOURSF < HDR10_SUN_DAWN_END) {
            // dawn
            float factor = (TIME_HOURSF - HDR10_SUN_DAWN_BEGIN) / (HDR10_SUN_DAWN_END - HDR10_SUN_DAWN_BEGIN);
            return lerp(normal_sun, hdr_sun, smoothstep(0, 1, factor));

        } else if (HDR10_SUN_DUSK_BEGIN < TIME_HOURSF && TIME_HOURSF < HDR10_SUN_DUSK_END) {
            // dusk
            float factor = (TIME_HOURSF - HDR10_SUN_DUSK_BEGIN) / (HDR10_SUN_DUSK_END - HDR10_SUN_DUSK_BEGIN);
            return lerp(hdr_sun, normal_sun, smoothstep(0, 1, factor));
        }

        // night
        return normal_sun;

    } else {
	    return s_base.Sample( smp_base, I.Tex0 ) * I.Color;
    }

//	float4 res = s_base.Sample( smp_base, I.Tex0 )*I.Color;
//	clip(res-m_AlphaRef);
//	clip(res-0.5);
//	return res;
}
